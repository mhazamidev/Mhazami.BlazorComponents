@if (Model != null)
{
    <ul class="mh-children-list">
        @foreach (var node in Model)
        {
            <li>
                <div @onmouseover="()=>{ node.ShowIcons = true; }" @onmouseout="()=>{node.ShowIcons = false;}">
                    @if (node.HasChildren)
                    {
                        <span class="mh-treeview-icon" @onclick="()=>Expend(node.Id)">
                            @if (node.IsExpanded)
                            {
                                @((MarkupString)UnExpendedIcon)
                            }
                            else
                            {
                                @((MarkupString)ExpendedIcon)
                            }
                        </span>
                    }
                    else
                    {
                        <span class="mh-treeview-icon">
                        </span>
                    }
                    @if (HasCheckBox)
                    {
                        <input type="checkbox" checked="@CheckedList.Exists(x=>x.Id==node.Id)" class="mh-treeview-check" id="@node.Id" @onchange="()=>CheckedNode(node)" />
                    }
                    <span>
                        @node.Title
                    </span>
                    <span class="mh-treeview-window-icons-box @(node.ShowIcons?"":"tree-display-none")">
                        <span class="mh-treeview-window-icon tree-icon-edit @(Updateble?"":"tree-display-none")" @onclick="()=>UpdateNode(node)">
                            <i class="fal fa-edit"></i>
                        </span>
                        <span class="mh-treeview-window-icon tree-icon-delete @(Removable?"":"tree-display-none")" @onclick="()=>DeleteNode(node)">
                            <i class="fas fa-trash-alt"></i>
                        </span>
                    </span>
                </div>
                @if (node.HasChildren && (node.IsExpanded || ExpendAll))
                {
                    <TreeViewChild Model="node.Children"
                                   IsOndemand="@IsOndemand"
                                   ExpendedIcon="@ExpendedIcon"
                                   UnExpendedIcon="@UnExpendedIcon"
                                   OndemandEvent="Expend"
                                   HasCheckBox="@HasCheckBox"
                                   CheckedNodeCallback="CheckedNode"
                                   Parent="@node.Id"
                                   CheckedList="@CheckedList"
                                   Nodes="@Nodes">
                        @ChildContent
                    </TreeViewChild>
                }
            </li>
        }
    </ul>
    @if (Removable && SelectedNodeForDelete is not null)
    {
        <div class="tree-delete-confirm-box">
            <div class="tree-delete-confirm-text">
                <span>
                    Are you sure to delete @(SelectedNodeForDelete.Title)?
                </span>
            </div>
            <div>
                <span class="tree-delete-confirm-btn tree-delete-confirm-btn-danger" @onclick="()=>ConfirmDelete(true)">Yes</span>
                <span class="tree-delete-confirm-btn tree-delete-confirm-btn-default" @onclick="()=>ConfirmDelete(false)">No</span>
            </div>
        </div>
    }
    @if (Updateble && OpenUpdateModal)
    {
        <div class="mh-treeview-update-modal">
        </div>
        <div class="mh-treeview-update-modal-body">
            <span class="close-update-modal" @onclick="CloseModal">
                <i class="far fa-times"></i>
            </span>
            @ChildContent
        </div>
    }
}
